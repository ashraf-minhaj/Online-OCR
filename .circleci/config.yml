version: 2.1

commands:
  tf-init:
    parameters:
      environment:
        default: dev
        type: string
    steps:
      - run: sh scripts/init.sh << parameters.environment >>

orbs:
  python: circleci/python@1.5.0
  aws-cli: circleci/aws-cli@3.1.3

jobs:
  build-n-test: 
    #  will use a python 3.10.2 container
    executor: aws-cli/default
    docker:
      - image: cimg/python:3.10.2
    working_directory: ~/project

    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout

      - aws-cli/setup:
          aws-access-key-id: aws_access_key_id
          aws-secret-access-key: aws_secret_access_key
          aws-region: region

      - run:
          name: get current dir
          command: pwd

      - run:
          name: Check pyton version
          command: python --version

      - run:
          name: list of things in Terraform directory
          command: cd Terraform; ls -a

      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/src/                # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      
      - run:
          name: Run tests                        # This assumes pytest is installed via the install-package step above
          command: cd src; pytest

  # aws-cli-cred-setup:
  #   executor: aws-cli/default
  #   working_directory: ~/project
  #   steps:
  #     - checkout
      
  #     - run:
  #         name: list of things in that
  #         command: ls -a

  #     - aws-cli/setup:
  #         aws-access-key-id: aws_access_key_id
  #         aws-secret-access-key: aws_secret_access_key
  #         aws-region: region
      
  #     - run:
  #         name: get aws acc info
  #         command: aws sts get-caller-identity

  #     - persist_to_workspace:
  #         root: .
  #         paths: 
  #           - .

  plan:
    executor: aws-cli/default
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    working_directory: ~/project
    steps:
      - checkout

      - aws-cli/setup:
          aws-access-key-id: aws_access_key_id
          aws-secret-access-key: aws_secret_access_key
          aws-region: region

      - run:
          name: get aws acc info
          command: aws sts get-caller-identity
      
      - run:
          name: Init infrastructure
          command: sh scripts/init.sh dev

      - run:
          name: Plan infrastructure
          command: sh scripts/plan.sh dev

      - run:
          name: list of things after plan
          command: cd Terraform; ls -a

      # path: /home/circleci/project
      - persist_to_workspace:
          root: .               # Must be an absolute path, or relative path from working_directory.
          paths:
            - .                 # Must be relative path from root

  apply:
    executor: aws-cli/default
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    working_directory: ~/project
    steps:

      - attach_workspace:
          at: .
          
      - checkout

      - aws-cli/setup:
          aws-access-key-id: aws_access_key_id
          aws-secret-access-key: aws_secret_access_key
          aws-region: region

      - run:
          name: Check persisted files
          command: cd Terraform; ls -a
        
      # - run:
      #     name: get aws acc info
      #     command: aws sts get-caller-identity
      
      - run:
          name: Apply infrastructure
          command: sh scripts/apply.sh dev

  destroy:
    executor: aws-cli/default
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: .
        
      - checkout

      - run:
          name: list of things in dir
          command: cd Terraform; ls -a

      - aws-cli/setup:
          aws-access-key-id: aws_access_key_id
          aws-secret-access-key: aws_secret_access_key
          aws-region: region

      - run:
          name: get aws acc info
          command: aws sts get-caller-identity

      - run:
          name: destroy
          command: sh scripts/destroy.sh stage

  init-param:
    executor: aws-cli/default
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: .
        
      - checkout

      - run:
          name: list of things in dir
          command: cd Terraform; ls -a

      - aws-cli/setup:
          aws-access-key-id: aws_access_key_id
          aws-secret-access-key: aws_secret_access_key
          aws-region: region

      - tf-init:
          environment: dev
    


# Invoke jobs via workflows
workflows:
  dev_workflow:
    # development branch workflow
    jobs:
      - build-n-test:
          filters:
            branches:
              only:
                  - dev/test-script

      # - aws-cli-cred-setup

      - plan:
          requires:
            - build-n-test

  stage_workflow: 
    # staging branch workflow
    jobs:
      - build-n-test:
          filters:
            branches:
              only:
                  - stage
      
      - plan:
          requires:
            - build-n-test

      - hold:
          name: Apply-Approval
          type: approval
          requires:
            - plan

      - apply:
          requires:
            - Apply-Approval

      - hold:
          name: Destroy-Approval
          type: approval
          requires:
            - apply
      
      - destroy:
          requires:
            - Destroy-Approval

  param_workflow: 
    # staging branch workflow
    jobs:
      - init-param:
          filters:
            branches:
              only:
                  - dev/cicd-element-params